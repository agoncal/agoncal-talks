@startuml

skinparam shadowing false
skinparam defaultFontName Consolas

Iterable <|-right- Instance
Instance <|-- CDI
CDI .right.> BeanManager : provides
Unmanaged *-right- UnmanagedInstance

class Unmanaged<T> {
    +Unmanaged(BeanManager, Class<T>)
    +Unmanaged(Class<T>)
    +UnmanagedInstance<T> newInstance()
}


class UnmanagedInstance<T> {
    +T get()
    +UnmanagedInstance<T> produce()
    +UnmanagedInstance<T> inject()
    +UnmanagedInstance<T> postConstruct()
    +UnmanagedInstance<T> preDestroy()
    +UnmanagedInstance<T> dispose()
}


interface BeanManager {
    +Object getReference(Bean<?>, Type, CreationalContext<?> )
    +Object getInjectableReference(InjectionPoint, CreationalContext<?> )
    +Set<Bean<?>> getBeans(Type, Annotation[])
    +Bean<? extends X> resolve(Set<Bean<? extends X>>)
    +void validate(InjectionPoint)
    +void fireEvent(Object, Annotation[])
    .. some methods skipped ..
    +boolean isQualifier(Class<? extends Annotation>)
    +boolean isStereotype(Class<? extends Annotation>)
    +boolean areQualifiersEquivalent(Annotation, Annotation)
    +boolean areInterceptorBindingsEquivalent(Annotation, Annotation)
    +Context getContext(Class<? extends Annotation>)
    +ELResolver getELResolver()
    +ExpressionFactory wrapExpressionFactory(ExpressionFactory)
    +AnnotatedType<T> createAnnotatedType(Class<T>)
    +InjectionTarget<T> createInjectionTarget(AnnotatedType<T>)
    +InjectionTargetFactory<T> getInjectionTargetFactory(AnnotatedType<T>)
    +BeanAttributes<T> createBeanAttributes(AnnotatedType<T>)
    +Bean<T> createBean(BeanAttributes<T>, Class<X>, ProducerFactory<X>)
    +InjectionPoint createInjectionPoint(AnnotatedField<?>)
}


class CDI<T> {
    # {static} Set<CDIProvider> discoveredProviders
    # {static} CDIProvider configuredProvider
    + {static} CDI<Object> current()
    + {static} void setCDIProvider(CDIProvider provider)
    + {abstract} BeanManager getBeanManager()
}


interface Instance<T>{
    +T get()
    +Instance<T> select()
    +Instance<T> select();
    +boolean isUnsatisfied()
    +boolean isAmbiguous()
    +void destroy()
}

interface Iterable<T> {
    +Iterator<T> iterator()
    +void forEach()
    +Spliterator<T> spliterator()
}

@enduml